{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["PokemonRow","pokemon","onSelect","name","english","type","join","onClick","PokemonInfo","base","Object","keys","map","key","App","React","useState","filter","filterSet","pokemonSet","selectedItem","selectedItemSet","useEffect","fetch","then","res","json","data","style","margin","width","paddingTop","className","value","onChange","evt","target","display","gridTemplateColumns","gridColumnGap","toLowerCase","includes","slice","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAIMA,G,MAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,SAAZ,OACjB,+BACE,6BAAKD,EAAQE,KAAKC,UAClB,6BAAKH,EAAQI,KAAKC,KAAK,OACvB,6BACE,wBAAQC,QAAS,kBAAML,EAASD,IAAhC,4BAiBAO,EAAc,SAAC,GAAD,IAAGL,EAAH,EAAGA,KAAMM,EAAT,EAASA,KAAT,OAClB,gCACE,6BAAKN,EAAKC,UACV,gCACGM,OAAOC,KAAKF,GAAMG,KAAI,SAACC,GAAD,OACrB,+BACE,6BAAKA,IACL,6BAAKJ,EAAKI,OAFHA,YAuFFC,MAhEf,WAAgB,IAAD,EACeC,IAAMC,SAAS,IAD9B,mBACNC,EADM,KACEC,EADF,OAEiBH,IAAMC,SAAS,IAFhC,mBAENf,EAFM,KAEGkB,EAFH,OAG2BJ,IAAMC,SAAS,MAH1C,mBAGNI,EAHM,KAGQC,EAHR,KAWb,OANAN,IAAMO,WAAU,WACdC,MAAM,qDACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAUR,EAAWQ,QAC5B,IAGD,sBACEC,MAAO,CACLC,OAAQ,OACRC,MAAO,IACPC,WAAY,QAJhB,UAOE,oBAAIC,UAAU,QAAd,4BACA,uBAAOC,MAAOhB,EAAQiB,SAAU,SAACC,GAAD,OAASjB,EAAUiB,EAAIC,OAAOH,UAC9D,sBACEL,MAAO,CACLS,QAAS,OACTC,oBAAqB,UACrBC,cAAe,QAJnB,UAOE,8BACE,wBAAOT,MAAM,OAAb,UACE,gCACE,+BACE,sCACA,2CAGJ,gCACG7B,EACEgB,QAAO,SAAChB,GAAD,OACNA,EAAQE,KAAKC,QACVoC,cACAC,SAASxB,EAAOuB,kBAEpBE,MAAM,EAAG,IACT9B,KAAI,SAACX,GAAD,OACH,cAAC,EAAD,CACEA,QAASA,EAETC,SAAU,SAACD,GAAD,OAAaoB,EAAgBpB,KADlCA,EAAQ0C,cAOxBvB,GACC,8BACE,6BAAKA,GAAgB,cAAC,EAAD,eAAiBA,eClGnCwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.faf9fa4f.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './App.css';\n\nconst PokemonRow = ({ pokemon, onSelect }) => (\n  <tr>\n    <td>{pokemon.name.english}</td>\n    <td>{pokemon.type.join(',')}</td>\n    <td>\n      <button onClick={() => onSelect(pokemon)}>Select!</button>\n    </td>\n  </tr>\n);\n\nPokemonRow.propTypes = {\n  pokemon: PropTypes.shape({\n    pokemon: PropTypes.shape({\n      name: PropTypes.shape({\n        english: PropTypes.string.isRequired,\n      }),\n    }),\n    type: PropTypes.arrayOf(PropTypes.string.isRequired),\n  }),\n  onSelect: PropTypes.func.isRequired,\n};\n\nconst PokemonInfo = ({ name, base }) => (\n  <div>\n    <h1>{name.english}</h1>\n    <table>\n      {Object.keys(base).map((key) => (\n        <tr key={key}>\n          <td>{key}</td>\n          <td>{base[key]}</td>\n        </tr>\n      ))}\n    </table>\n  </div>\n);\n\nPokemonInfo.propTypes = {\n  name: PropTypes.shape({\n    english: PropTypes.string.isRequired,\n  }),\n  base: PropTypes.shape({\n    HP: PropTypes.number.isRequired,\n    Attack: PropTypes.number.isRequired,\n    Defense: PropTypes.number.isRequired,\n    'Sp. Attack': PropTypes.number.isRequired,\n    'Sp. Defense': PropTypes.number.isRequired,\n    Speed: PropTypes.number.isRequired,\n  }),\n};\n\nfunction App() {\n  const [filter, filterSet] = React.useState('');\n  const [pokemon, pokemonSet] = React.useState([]);\n  const [selectedItem, selectedItemSet] = React.useState(null);\n\n  React.useEffect(() => {\n    fetch('http://localhost:3000/starting-react/pokemon.json')\n      .then((res) => res.json())\n      .then((data) => pokemonSet(data));\n  }, []);\n\n  return (\n    <div\n      style={{\n        margin: 'auto',\n        width: 800,\n        paddingTop: '1rem',\n      }}\n    >\n      <h1 className='title'>Pokemon Search</h1>\n      <input value={filter} onChange={(evt) => filterSet(evt.target.value)} />\n      <div\n        style={{\n          display: 'grid',\n          gridTemplateColumns: '70% 30%',\n          gridColumnGap: '1rem',\n        }}\n      >\n        <div>\n          <table width='100%'>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Type</th>\n              </tr>\n            </thead>\n            <tbody>\n              {pokemon\n                .filter((pokemon) =>\n                  pokemon.name.english\n                    .toLowerCase()\n                    .includes(filter.toLowerCase())\n                )\n                .slice(0, 20)\n                .map((pokemon) => (\n                  <PokemonRow\n                    pokemon={pokemon}\n                    key={pokemon.id}\n                    onSelect={(pokemon) => selectedItemSet(pokemon)}\n                  />\n                ))}\n            </tbody>\n          </table>\n        </div>\n        {selectedItem && (\n          <div>\n            <h1>{selectedItem && <PokemonInfo {...selectedItem} />}</h1>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}